NDND-AUTOCONFIG(1)
==================

NAME
----
ndnd-autoconfig - Command/daemon for automatic default router configuration for ndnd.

SYNOPSIS
--------
*ndnd-autoconfig* [-d]

DESCRIPTION
-----------
The *ndnd-autoconfig* command can be used to automatically configure default route for ndnd.
The command can be run as daemon (with -d option) or once.

OPTIONS
-------
*-d*::
    Runs in daemon mode.  If not specified, the command will attempt to auto-configure
    default route only once.

Auto-config process (3 stages)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Stages 1 and 2 already exist in the current *ndnd-autoconfig* script.

1. Add multicast face, issue interest for /local/ndn/udp, and get the latest version of the data using appropriate exclude filters (using "ndnpeek -v /local/ndn/udp")

 - if data returned, configure face to the hub and finish auto-config
 - auto-configured face is remembered using creating a "fake" route to /autoconf prefix

2. If previous step failed, issue the following DNS query using dig command "dig +search +short +cmd +tries=2 +ndots=10 _ndnx._udp srv"

 - if valid data returned, get the first returned data, configure face, and finish auto-config
 - auto-configured face is remembered using creating a "fake" route to /autoconf prefix

3. If previous steps failed:

    -  Obtain name of the users public key from ~/.ndnx/.ndnx_keystore.pubcert file using *ndn-pubkey-name* command-line tool

    -  "DNSify" name, removing first two and last three components using *ndn-name-dnsifier.py*

        * /ndn/keys/<site>/<user>/<key-hash>/<version>/<segment> is converted to <site>/<user>

        * reverse order of components: <user>/<site>

        * replace "/" with ".":  <user>.<site>, for example:

            /ndn/keys/ucla.edu/alex/<key-hash> -> alex.ucla.edu

        * stop further processing if the resulting name does not conform DNS standard (I already wrote a procedure to attempt to convert to international domain name, if it is possible)

    -  Append _homehub._autoconf.named-data.net.  postfix to the dnsified name

        alex.ucla.edu._homehub._autoconf.named-data.net.

    -  Issue a SRV dns query with _ndnx._udp prefix (not really necessary, but should do it for clarity)

        "dig +short +cmd _ndnx._udp.alex.ucla.edu._homehub._autoconf.named-data.net. srv"

    -  In case of a positive answer, set up face and remember it using /autoconf prefix

Prerequisites for 3rd stage of autoconfiguration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1. Extract public key (.pem file) from automatically (or newly) generated keystore file

   # ndn-extract-public-key > user.pem

2. Send out ``user.pem'' file to site operator, which signs and publishes key in NDN repos

3. Site operator will return the signed key in form of a special ``user.pubcert'' file, containing 2 NDN ContentObjects:

  - Signed ContentObject for user's public key (/ndn/keys/<site>/<user>/<key-hash>/...)

  - Signed ContentObject for meta information about user's public key certification (/ndn/keys/<site>/<user>/"info"/<key-hash>/...)

4. Installs received ``user.pubcert'' file

  # ndn-install-pubcert user.pubcert

Additional requirements for macports users
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

On mac with macports auto-config script is running as ndnx user. The following three-step process will perform all necessary signing and certification installing, assuming that macports are installed in /opt/local:

1. Extract macports public key (as super-user)

    # sudo HOME=/opt/local/etc/ndnx ndn-extract-public-key > ndnx.pem

2. Sign macports key and create .pubcert file

   # ndn-sign-key -i "ndnx-autoconfig" ndnx.pem

3. Install key to macports (as super-user)

   # sudo HOME=/opt/local/etc/ndnx ndn-install-pubcert ndnx.pubcert

EXIT STATUS
-----------
*0*::
     Success

*-1*::
     Failure to automatically configure default route

AUTHOR
------
Alexander Afanasyev
